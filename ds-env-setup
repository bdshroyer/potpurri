#!/bin/bash
set -e

usage() {
    echo ""
    echo -e "Usage: $0 name [opts]"
    echo -e "\t-h for help message and options."
    echo -e "\t-d to install deep learning libraries (Tensorflow, Jax, Trax)."
    echo -e "\t-m to enable AMD GPU use on a MacBook. (does nothing if -d is not set)"
    echo -e "\t-a to install Apache Airflow and related tooling."
    echo -e "\t-p=PY_VERSION: use Python version PY_VERSION during setup. Defaults to system version."
    echo -e "\t-n=ENV_NAME: Sets name of virtual environment. Defaults to Python version."
    echo ""
}

# Set default python environment to be that of base system.
PY_ENV=$(python --version | cut -d " " -f 2)

# Option parsing
while getopts ":hdman:l:p:" opt; do
    case $opt in
        h)
            # Help command
            usage
            exit 0
            ;;
        p)
            echo "Overriding Python version ${PY_ENV}..."
            # Python version
            PY_ENV=$OPTARG
            ;;
        d)
            DEEP_LEARNING=1
            ;;
        m)
            ENABLE_MACBOOK_GPU=1
            ;;
        a)
            AIRFLOW=1
            ;;
        l)
            LOCAL_REPO=$OPTARG
            ;;
        n)
            echo "Overriding default environment name..."
            ENV_NAME=$OPTARG
            ;;
        \?)
            # Invalid option
            echo ""
            echo "ERROR: Invalid option."
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

# Set default environment name to name of Python environment.
if [ -z $ENV_NAME ]; then
    ENV_NAME=$PY_ENV
fi

CONDA_BASE=$(conda info --base)

echo "Conda base..."
echo $CONDA_BASE

# If an environment exists under the given name, then skip the creation process.
# I chose to do this so that this script could be extended without having to
# burn down the environment every time.
if [ -z $(conda env list | cut -d" " -f 1 | grep -x $ENV_NAME) ]; then
    echo "Creating environment '$ENV_NAME'..."
    conda update -y conda
    conda create -y -n $ENV_NAME python=$PY_ENV
else
    echo "Environment already exists. Skipping creation."
    echo "To rebuild this environment from scratch, first run \`conda env remove --name $ENV_NAME\`."
fi

echo -n "Sourcing conda setup..."
source $(conda info --base)/etc/profile.d/conda.sh
echo "done."


conda activate $ENV_NAME

echo "Installing/upgrading packages in environment $ENV_NAME..."

conda install -y \
    numpy \
    scipy \
    pandas \
    scikit-learn \
    networkx \
    matplotlib \
    seaborn \
    jupyter \
    nltk \
    geopandas \
    pytest \
    scikit-learn-intelex

echo "Installing/upgrading conda-forge packages in environment $ENV_NAME..."

conda install -y -c conda-forge \
    jupyter_contrib_nbextensions \
    gitpython \
    py-xgboost \
    schema \
    yaml \
    feature_engine \
    shap

jupyter contrib nbextension install --user


echo "Upgrading pip..."

pip install -U pip

if [[ $DEEP_LEARNING -eq 1 ]]; then
    echo "Installing/upgrading deep learning packages in environment $ENV_NAME..."

    pip install -U \
        tensorflow \
        keras-tuner

    # Install the Pluggable device options required to enable GPU usage on a (non-M1) MacBook Pro.
    if [[ $ENABLE_MACBOOK_GPU -eq 1 ]]; then
        pip install -U \
            tensorflow-macos \
            tensorflow-metal
    fi

    # Split call, because auxiliary tensorflow tooling barfs often
    pip install -U \
        tensorflow-transform \
        tensorflow-data-validation \
        tfx \
        tensorflow-model-analysis
fi

if [[ $AIRFLOW -eq 1 ]]; then
    echo "Installing/upgrading Apache Airflow in environment $ENV_NAME..."
    pip install -U apache-airflow
    export AIRFLOW_HOME=$HOME/airflow
    mkdir -p $AIRFLOW_HOME

    pushd $AIRFLOW_HOME
    airflow db init
    popd

fi

if [[ -n "$LOCAL_REPO" ]]; then
    echo "Installing editable local repo ${LOCAL_REPO}..."
    pip install -e $LOCAL_REPO
fi


echo "Installation/upgrade for environment $ENV_NAME complete."
